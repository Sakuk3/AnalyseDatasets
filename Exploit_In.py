import sqlite3
from sqlite3 import Error

read_file = "Datasets/Exploit.in/1.txt"
write_file ="Datasets//Exploit.in/passwords.txt"
database = "Datasets/Exploit.in/database.db"
batch_size = 10000 # Numeber of entrys to process, null if all
batch_offset = 0
batch_limit = 5

def main():
    conn = create_connection(database)
    with conn:
        #create_db(conn)
        print('Processing Data...')
        process(conn)
        print('Writing Data to File...')
        get_passwords(conn)

def insertPassword(conn,password):
    cur = conn.cursor()
    cur.execute("SELECT * FROM passwords WHERE password == '{}'".format(password))
    entry = cur.fetchall()
    if entry == []:
        cur.execute("""
            INSERT INTO passwords(password,count)
            VALUES('{}',1)""".format(password))
    else:
        cur.execute("""
            UPDATE passwords
            SET count = {}
            WHERE password == '{}'; """.format(entry[0][1]+1,password))

def get_passwords(conn):
    cur = conn.cursor()

    cur.execute("SELECT * FROM passwords WHERE count > 10 ORDER BY count DESC")
    with open(write_file,"w") as fo:
        fo.write('count;password\n')

        for password in cur.fetchall():
            fo.write('{};{}\n'.format(password[1],password[0]))

def process(conn):
    with open(read_file,"r") as fi:
        if batch_offset != 0:
            for _ in range(batch_offset * batch_size):
                next(fi)
        batch_number = batch_offset
        cur = conn.cursor()
        cur.execute('BEGIN TRANSACTION')
        for index,entry in enumerate(fi):
            insertPassword(conn,entry.split(':')[1][:-1])
            if index != 0 and index % batch_size * (batch_number+1) == 0:
                cur.execute('COMMIT')
                print('Batch {} processed'.format(batch_number))
                if batch_number == batch_limit:
                    break
                batch_number += 1
                cur.execute('BEGIN TRANSACTION')

def create_connection(db_file):
    """ create a database connection to the SQLite database
        specified by the db_file
    :param db_file: database file
    :return: Connection object or None
    """
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except Error as e:
        print(e)

    return None

def create_db(conn):
    cur = conn.cursor()
    try:
        cur.execute("DROP TABLE passwords")
    except:
        pass
    cur.execute("""
        CREATE TABLE passwords(
            password varchar(50) NOT NULL,
            count INTEGER NOT NULL,
            PRIMARY KEY(password)
        );""")

if __name__ == "__main__":
    main()
